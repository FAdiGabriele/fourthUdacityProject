package com.udacity.project4.locationreminders.data.local

import android.icu.text.CaseMap
import androidx.room.Dao
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.Query
import androidx.room.Update
import com.udacity.project4.locationreminders.data.dto.ReminderDTO

/**
 * Data Access Object for the reminders table.
 */
@Dao
interface RemindersDao {
    /**
     * @return all reminders.
     */
    @Query("SELECT * FROM reminders")
    suspend fun getReminders(): List<ReminderDTO>

    /**
     * @param reminderId the id of the reminder
     * @return the reminder object with the reminderId
     */
    @Query("SELECT * FROM reminders WHERE entry_id = :reminderId")
    suspend fun getReminderById(reminderId: String): ReminderDTO?

    /**
     * Insert a reminder in the database. If the reminder already exists, replace it.
     *
     * @param reminder the reminder to be inserted.
     */
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun saveReminder(reminder: ReminderDTO)

    /**
     * Delete all reminders.
     */
    @Query("DELETE FROM reminders")
    suspend fun deleteAllReminders()



    /**
     * Delete a single reminder
     *
     * For each reminder there is a different Id because it is autogenerated
     * So, it will check all Items with the same values but it deletes only one
     *
     * @param title of the Item
     * @param description of the Item
     * @param latitude of the Item
     * @param longitude of the Item
     */
    @Query("DELETE FROM reminders WHERE entry_id = :reminderId")
    suspend fun deleteReminder(reminderId: String)
}